generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String?
  googleId  String?  @unique @map("google_id")
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  isActive  Boolean  @default(true) @map("is_active")
  isStaff   Boolean  @default(false) @map("is_staff")
  dateJoined DateTime @default(now()) @map("date_joined")
  lastLogin  DateTime? @map("last_login")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile           UserProfile?
  mealEntries       MealEntry[]
  exerciseEntries   ExerciseEntry[]
  weightEntries     WeightEntry[]
  webauthnCredentials WebAuthnCredential[]
  tasks             Task[]

  @@map("auth_user")
}

model UserProfile {
  id                    String   @id @default(uuid())
  userId                String   @unique @map("user_id")
  height                Float?
  weight                Float?
  dateOfBirth           DateTime? @map("date_of_birth") @db.Date
  timezone              String   @default("US/Pacific")
  startOfWeek           Int      @default(2) @map("start_of_week")
  metabolicRate         Int?     @map("metabolic_rate")
  weightLossGoal        Float    @default(0) @map("weight_loss_goal")
  notifications         Boolean  @default(true)
  emailNotifications    Boolean  @default(true) @map("email_notifications")
  weeklyReports         Boolean  @default(true) @map("weekly_reports")
  darkMode              Boolean  @default(false) @map("dark_mode")
  pushToken             String?  @map("push_token")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_userprofile")
}

model WebAuthnCredential {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  credentialId String    @map("credential_id")
  publicKey    String    @map("public_key")
  signCount    Int       @default(0) @map("sign_count")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at")
  lastUsed     DateTime? @map("last_used")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialId])
  @@map("users_webauthncredential")
}

// Nutrition Models
model MealEntry {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  date        DateTime @db.Date
  mealType    String   @map("meal_type")
  description String
  calories    Int
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, mealType])
  @@index([userId, date(sort: Desc)])
  @@map("nutrition_mealentry")
}

model ExerciseEntry {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  date            DateTime @db.Date
  description     String
  caloriesBurned  Int      @map("calories_burned")
  durationMinutes Int      @map("duration_minutes")
  createdAt       DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date(sort: Desc)])
  @@map("nutrition_exerciseentry")
}

model WeightEntry {
  id     String   @id @default(uuid())
  userId String   @map("user_id")
  date   DateTime @db.Date
  weight Float

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date(sort: Desc)])
  @@map("nutrition_weightentry")
}

// Todo Models
model Task {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  name            String
  description     String?
  dueDate         DateTime? @map("due_date") @db.Date
  reminderType    String?   @map("reminder_type") // 'daily', 'weekly', 'monthly', 'yearly', null
  imageUrl        String?   @map("image_url")
  completed       Boolean   @default(false)
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dueDate(sort: Asc)])
  @@index([userId, completed])
  @@map("todo_task")
}